plugins {
    id "com.moowork.node" version "0.12"
}

apply plugin: "org.asciidoctor.convert"

project.parent.tasks.collectDocumentation.dependsOn project.tasks.asciidoctor

ext {
    snippetsDir = new File(project.buildDir, "generated-snippets")
}

dependencies {
    /*******************************
     * Annotation Processors
     *******************************/

    apt("org.springframework.boot:spring-boot-configuration-processor")

    /*******************************
     * API Dependencies
     *******************************/

    api project(":genie-core")
    api("io.springfox:springfox-swagger2")
    api("org.apache.commons:commons-exec")
    api("org.bitbucket.b_c:jose4j")
    api("org.springframework.boot:spring-boot-starter-actuator")
    api("org.springframework.boot:spring-boot-starter-data-redis")
    api("org.springframework.boot:spring-boot-starter-hateoas")
    api("org.springframework.boot:spring-boot-starter-mail")
    api("org.springframework.boot:spring-boot-starter-security")
    api("org.springframework.boot:spring-boot-starter-web")
    api("org.springframework.integration:spring-integration-zookeeper")
    api("org.springframework.retry:spring-retry")
    api("org.springframework.security:spring-security-jwt")
    api("org.springframework.security.extensions:spring-security-saml2-core") {
        exclude group: "org.bouncycastle", module: "bcprov-jdk15"
    }
    api("org.springframework.security.oauth:spring-security-oauth2")

    /*******************************
     * Implementation Dependencies
     *******************************/

    implementation("com.amazonaws:aws-java-sdk-sts")
    implementation("com.google.guava:guava")
    implementation("commons-io:commons-io")
    implementation("commons-validator:commons-validator")
    implementation("io.springfox:springfox-swagger-ui")
    implementation("io.springfox:springfox-bean-validators")
    implementation("org.apache.commons:commons-lang3")
    implementation("org.apache.httpcomponents:httpclient")
    implementation("org.springframework.boot:spring-boot-starter-integration")
    implementation("org.springframework.boot:spring-boot-starter-thymeleaf")
    implementation("org.springframework.cloud:spring-cloud-starter-eureka")
    implementation("org.springframework.cloud:spring-cloud-starter-spectator")
    implementation("org.springframework.session:spring-session")
    implementation("org.thymeleaf.extras:thymeleaf-extras-springsecurity4")

    /*******************************
     * Provided Dependencies
     *******************************/

    /*******************************
     * Optional Dependencies
     *******************************/

    compileOnly("org.springframework.boot:spring-boot-configuration-processor")

    /*******************************
     * Runtime Dependencies
     *******************************/

    /*******************************
     * Test Dependencies
     *******************************/

    testCompile project(":genie-test")
    testCompile("com.fasterxml.jackson.datatype:jackson-datatype-jdk8")
    testCompile("com.github.springtestdbunit:spring-test-dbunit")
    testCompile("com.github.tomakehurst:wiremock")
    testCompile("com.jayway.jsonpath:json-path")
    testCompile("net.sf.jtidy:jtidy")
    testCompile("org.dbunit:dbunit")
    testCompile("org.springframework.boot:spring-boot-starter-jetty")
    testCompile("org.springframework.restdocs:spring-restdocs-core")
    testCompile("org.springframework.restdocs:spring-restdocs-mockmvc")
    testCompile("org.springframework.security:spring-security-test")
}

license {
    excludes(["static/*", "*.yml", "genie-banner.txt"])
}

test {
    outputs.dir snippetsDir
}

// This is needed cause some things like attributes for asciidoctor don't serialize project.version properly at runtime
def genieVersion = project.version.toString()

asciidoctor {
    dependsOn test
    inputs.dir snippetsDir
    attributes  \
             "snippets": snippetsDir,
            "revnumber": genieVersion,
            "docinfo1": ""

    // See: https://github.com/asciidoctor/asciidoctor-gradle-plugin/issues/154
    def capturedOutput = []
    def listener = { capturedOutput << it } as StandardOutputListener

    logging.addStandardErrorListener(listener)
    logging.addStandardOutputListener(listener)

    doLast {
        logging.removeStandardOutputListener(listener)
        logging.removeStandardErrorListener(listener)
        capturedOutput.join('').with { output ->
            if (output =~ /include file not found:/) {
                throw new RuntimeException("Include file(s) not found.\n" + output)
            }
        }
    }
}

processResources {
    from("src/main/resources") {
        include "**/*.properties"
        include "**/*.yml"
        filter {
            it.replace("GENIE_VERSION", genieVersion)
        }
    }
}

compileJava {
    dependsOn processResources
}

node {
    version = "4.4.0"
    npmVersion = "3.8.6"
    download = true
}

def static_build_dir = new File(project.projectDir, "/src/main/resources/static/build")
def static_project_dir = new File(project.projectDir, "/src/main/resources/static")

clean {
    delete static_build_dir
}

task bundle(type: NpmTask) {
    inputs.dir static_project_dir
    outputs.dir static_build_dir
    args = ["run", "build"]
}

bundle.dependsOn(npm_install)

jar {
    dependsOn bundle

    manifest {
        attributes("Implementation-Version": genieVersion)
    }

    from(static_build_dir) {
        into "static"
    }
}
