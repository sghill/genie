ext {
    metaModelIgnorePattern = "**/com/netflix/genie/core/jpa/entities/*_.java"
}

configurations {
    jpaModelGen {
        extendsFrom runtimeElements
    }
}

dependencies {
    /*******************************
     * API Dependencies
     *******************************/

    api project(":genie-common")
    api("com.github.fge:json-patch")
    api("com.netflix.spectator:spectator-api")
    api("org.apache.commons:commons-exec")
    api("org.springframework.boot:spring-boot-starter")
    api("org.springframework.boot:spring-boot-starter-data-jpa")
    api("org.springframework.cloud:spring-cloud-aws-context")

    /*******************************
     * Implementation Dependencies
     *******************************/

    implementation("com.google.guava:guava")
    implementation("commons-io:commons-io")
    implementation("org.apache.commons:commons-lang3")
    implementation("org.springframework.boot:spring-boot-starter-aop")
    implementation("org.springframework.boot:spring-boot-starter-mail")
    implementation("org.springframework.retry:spring-retry")

    /*******************************
     * Runtime Dependencies
     *******************************/

    // Database Libs
    runtime("mysql:mysql-connector-java")
    runtime("org.hsqldb:hsqldb")
    runtime("org.postgresql:postgresql")

    /*******************************
     * Test Dependencies
     *******************************/

    testCompile project(":genie-test")
    testCompile("org.dbunit:dbunit")
    testCompile("com.github.springtestdbunit:spring-test-dbunit")

    /*******************************
     * JPA Model Gen Dependencies
     *******************************/

    // Hibernate Metamodel Generator Libraries
    jpaModelGen("org.hibernate:hibernate-jpamodelgen")
    jpaModelGen("org.projectlombok:lombok")
    jpaModelGen("com.google.code.findbugs:annotations")
}

task generateJPAMetaModel(type: JavaCompile, group: "build", description: "Generate JPA Meta Models") {
    source = sourceSets.main.java
    outputs.dir generatedSourcesJavaDir
    destinationDir = generatedSourcesJavaDir
    classpath = configurations.jpaModelGen
    options.compilerArgs = [
            "-proc:only"
    ]
}

compileJava {
    dependsOn generateJPAMetaModel
}

//Ignore the generated classes from all our style/coverage/bug finding tools
tasks.withType(Checkstyle) {
    exclude metaModelIgnorePattern
}

tasks.withType(FindBugs) {
    classes = classes.filter {
        !it.path.contains("_")
    }
}

tasks.withType(Pmd) {
    exclude metaModelIgnorePattern
}

test {
    jacoco {
        excludes = ["com/netflix/genie/core/jpa/entities/*_*"]
    }
}

jacocoTestReport {
    doFirst {
        classDirectories = fileTree(dir: "${buildDir}/classes/main/").exclude(["com/netflix/genie/core/jpa/entities/*_*"])
    }
}
